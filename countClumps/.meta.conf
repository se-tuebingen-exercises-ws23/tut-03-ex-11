log-results = true
meta-tests = [
  { type = "replace", path = "Clumps.scala", name = "always finds clumps", start = 15, end = 28, replacement = "nums.size / 2" }
  { type = "replace", path = "Clumps.scala", name = "always returns zero", start = 14, end = 28, replacement = "return 0" }
  { type = "replace", path = "Clumps.scala", name = "checks in pairs", start = 16, end = 27, replacement = """
    for (i <- 0 until nums.length by 2) {
      if (i + 1 < nums.length && nums(i) == nums(i + 1)) {
         count += 1
      }
    }"""}
  { type = "replace", path = "Clumps.scala", name = "does not support more than two per clump", start = 17, end = 27, replacement = """
    for (i <- 1 until nums.length) {
      if (nums(i) == prev) {
        count += 1
      }
      if (nums(i) != prev) {
        prev = nums(i)
      }
    }"""}
  { type = "replace", path = "Clumps.scala", name = "does not support multiple clumps", start = 28, end = 28, replacement = "if count > 1 then 1 else count" }
  { type = "replace", path = "Clumps.scala", name = "no empty check", start = 14, end = 14, replacement = "if (nums == null) return 0" }
  { type = "replace", path = "Clumps.scala", name = "no null check", start = 14, end = 14, replacement = "if (nums.length == 0) return 0" }
  { type = "replace", path = "Clumps.scala", name = "only checks first two elements", start = 14, end = 28, replacement = """
    if (nums != null && nums.length >= 2 && nums(0) == nums(1)) {
      return 1
    } else {
      return 0
    }"""}
  { type = "replace", path = "Clumps.scala", name = "only checks last two elements", start = 14, end = 28, replacement = """
    if (nums != null && nums.length >= 2 && nums(nums.length - 2) == nums(nums.length - 1)) {
      return 1
    } else {
      return 0
    }"""}
  { type = "replace", path = "Clumps.scala", name = "skips elements after clump", start = 18, end = 27, replacement = """
    var skip = false
    var i: Int = 1
    while (i < nums.length) {
      if (nums(i) == prev && !inClump) {
        inClump = true
        count += 1
      }
      if (nums(i) != prev) {
        prev = nums(i)
        inClump = false
      }

      if (inClump) {
        i += 2
      } else {
        i += 1
      }
    }"""}
  { type = "replace", path = "Clumps.scala", name = "skips first element", start = 14, end = 18, replacement = """
    if (nums == null && nums.length <= 1) {
      return 0
    }
    var count = 0
    var prev = nums(1)
    var inClump = false
    for (i <- 2 until nums.length) {"""}
  { type = "replace", path = "Clumps.scala", name = "skips last element", start = 18, end = 18, replacement = "for (i <- 1 until nums.length - 1) {" }
  { type = "replace", path = "Clumps.scala", name = "wrong result for one element", start = 15, end = 15, replacement = """
    if (nums.length == 1) {
      return 1
    }
    var count = 0"""}
]
